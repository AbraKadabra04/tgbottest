# bot.py

import random
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.command import Command
import psycopg2

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ config.py
from config import API_TOKEN, ADMIN_ID, DB_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_db():
    global conn
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS global_words (
            id SERIAL PRIMARY KEY,
            word TEXT NOT NULL,
            translation TEXT NOT NULL
        )
        ''')
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_words (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            word TEXT NOT NULL,
            translation TEXT NOT NULL
        )
        ''')
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_stats (
            user_id BIGINT PRIMARY KEY,
            correct_answers INTEGER DEFAULT 0,
            wrong_answers INTEGER DEFAULT 0
        )
        ''')

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤
        cursor.execute('SELECT COUNT(*) FROM global_words')
        count = cursor.fetchone()[0]
        if count == 0:
            default_words = [
                ('red', '–∫—Ä–∞—Å–Ω—ã–π'),
                ('green', '–∑–µ–ª—ë–Ω—ã–π'),
                ('blue', '—Å–∏–Ω–∏–π'),
                ('yellow', '–∂—ë–ª—Ç—ã–π'),
                ('he', '–æ–Ω'),
                ('she', '–æ–Ω–∞'),
                ('it', '–æ–Ω–æ'),
                ('we', '–º—ã'),
                ('you', '–≤—ã'),
                ('they', '–æ–Ω–∏')
            ]
            cursor.executemany('INSERT INTO global_words (word, translation) VALUES (%s, %s)', default_words)

        conn.commit()
        cursor.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
state = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id == ADMIN_ID

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
def get_answer_keyboard(translations):
    answer_buttons = [
        InlineKeyboardButton(text=translation, callback_data=f"answer_{translation}")
        for translation in translations
    ]
    stop_button = [InlineKeyboardButton(text="‚èπ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="stop_quiz")]
    markup = InlineKeyboardMarkup(inline_keyboard=[answer_buttons, stop_button])
    return markup

# –ö–æ–º–∞–Ω–¥–∞ "quiz" ‚Äî –Ω–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@dp.message(Command("quiz"))
async def quiz_word(message: types.Message):
    user_id = message.from_user.id
    await ask_question(message, user_id)

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def ask_question(message: types.Message, user_id: int):
    cursor = conn.cursor()
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤
        cursor.execute('''
        SELECT word, translation FROM (
            SELECT word, translation FROM global_words
            UNION ALL
            SELECT word, translation FROM user_words WHERE user_id = %s
        ) AS all_words
        ORDER BY RANDOM() LIMIT 1
        ''', (user_id,))
        result = cursor.fetchone()

        if not result:
            await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_word.')
            return

        quiz_word, correct_translation = result

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        cursor.execute('''
        SELECT translation FROM (
            SELECT translation FROM global_words
            UNION ALL
            SELECT translation FROM user_words WHERE user_id = %s
        ) AS all_translations
        WHERE translation != %s
        ORDER BY RANDOM() LIMIT 3
        ''', (user_id, correct_translation))
        fake_translations = [row[0] for row in cursor.fetchall()]

        if len(fake_translations) < 3:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_word.')
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        translations = [correct_translation] + fake_translations
        random.shuffle(translations)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state[user_id] = correct_translation

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {quiz_word}',
            reply_markup=get_answer_keyboard(translations)
        )
    finally:
        cursor.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(lambda query: query.data.startswith("answer_") or query.data == "stop_quiz")
async def check_answer(query: types.CallbackQuery):
    user_id = query.from_user.id

    if query.data == "stop_quiz":
        await query.message.answer('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!')
        state.pop(user_id, None)
        return

    selected_translation = query.data.split("_")[1]
    correct_translation = state.get(user_id)
    if correct_translation is None:
        await query.message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.')
        return

    cursor = conn.cursor()
    try:
        if selected_translation.lower() == correct_translation.lower():
            cursor.execute('''
            INSERT INTO user_stats (user_id, correct_answers, wrong_answers)
            VALUES (%s, 1, 0)
            ON CONFLICT (user_id) DO UPDATE SET correct_answers = user_stats.correct_answers + 1
            ''', (user_id,))
            conn.commit()
            await query.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ')
        else:
            cursor.execute('''
            INSERT INTO user_stats (user_id, correct_answers, wrong_answers)
            VALUES (%s, 0, 1)
            ON CONFLICT (user_id) DO UPDATE SET wrong_answers = user_stats.wrong_answers + 1
            ''', (user_id,))
            conn.commit()
            await query.message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

        await ask_question(query.message, user_id)
    finally:
        cursor.close()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    initialize_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())