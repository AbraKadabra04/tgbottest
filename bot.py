import random
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.command import Command
import psycopg2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = 'YOU TOKEN'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    "dbname": "name",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    "user": "user",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL
    "password": "password",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
    "host": "localhost",  # –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    "port": "5432"  # –ü–æ—Ä—Ç PostgreSQL
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_db():
    global conn
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS global_words (
            id SERIAL PRIMARY KEY,
            word TEXT NOT NULL,
            translation TEXT NOT NULL
        )
        ''')
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_words (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            word TEXT NOT NULL,
            translation TEXT NOT NULL
        )
        ''')
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_stats (
            user_id BIGINT PRIMARY KEY,
            correct_answers INTEGER DEFAULT 0,
            wrong_answers INTEGER DEFAULT 0
        )
        ''')

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤
        cursor.execute('SELECT COUNT(*) FROM global_words')
        count = cursor.fetchone()[0]
        if count == 0:
            default_words = [
                ('red', '–∫—Ä–∞—Å–Ω—ã–π'),
                ('green', '–∑–µ–ª—ë–Ω—ã–π'),
                ('blue', '—Å–∏–Ω–∏–π'),
                ('yellow', '–∂—ë–ª—Ç—ã–π'),
                ('he', '–æ–Ω'),
                ('she', '–æ–Ω–∞'),
                ('it', '–æ–Ω–æ'),
                ('we', '–º—ã'),
                ('you', '–≤—ã'),
                ('they', '–æ–Ω–∏')
            ]
            cursor.executemany('INSERT INTO global_words (word, translation) VALUES (%s, %s)', default_words)

        conn.commit()
        cursor.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
state = {}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
ADMIN_ID = 123456789

def is_admin(user_id):
    return user_id == ADMIN_ID

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
def get_main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–∞—Ä—Ç –∫–≤–∏–∑")],
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É—á–∏—Ç—å —Å–ª–æ–≤–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
        '/quiz - —É—á–∏—Ç—å —Å–ª–æ–≤–∞\n'
        '/add_word - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n'
        '/delete_word - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n'
        '/list_words - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–ª–æ–≤\n'
        '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤\n'
        '/help - –ø–æ–º–æ—â—å',
        reply_markup=get_main_menu_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@dp.message(Command("help"))
async def send_help(message: types.Message):
    await message.answer(
        '–ö–æ–º–∞–Ω–¥—ã:\n'
        '/quiz - —É—á–∏—Ç—å —Å–ª–æ–≤–∞\n'
        '/add_word - –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞\n'
        '/delete_word - —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞\n'
        '/list_words - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–ª–æ–≤\n'
        '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤\n',
        reply_markup=get_main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
@dp.message(lambda message: message.text in ["–°—Ç–∞—Ä—Ç –∫–≤–∏–∑", "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", "–ü–æ–º–æ—â—å"])
async def handle_menu_commands(message: types.Message):
    if message.text == "–°—Ç–∞—Ä—Ç –∫–≤–∏–∑":
        await quiz_word(message)
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ":
        await add_word(message)
    elif message.text == "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ":
        await delete_word(message)
    elif message.text == "–ü–æ–º–æ—â—å":
        await send_help(message)

# –ö–æ–º–∞–Ω–¥–∞ "quiz" ‚Äî –Ω–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@dp.message(Command("quiz"))
async def quiz_word(message: types.Message):
    user_id = message.from_user.id
    await ask_question(message, user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def ask_question(message: types.Message, user_id: int):
    cursor = conn.cursor()
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞ (–æ–±—â–∏–µ + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)
        cursor.execute('SELECT word, translation FROM global_words')
        global_words = cursor.fetchall()
        cursor.execute('SELECT word, translation FROM user_words WHERE user_id = %s', (user_id,))
        user_words = cursor.fetchall()
        words = global_words + user_words
        if not words:
            await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_word.')
            return
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
        quiz_word, correct_translation = random.choice(words)
        # –°–æ–∑–¥–∞—ë–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ (1 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π + 3 —Å–ª—É—á–∞–π–Ω—ã—Ö)
        translations = [correct_translation]
        words_pool = [word[1] for word in words if word[1] != correct_translation]
        if len(words_pool) < 3:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_word.')
            return
        fake_translations = random.sample(words_pool, 3)
        translations.extend(fake_translations)
        random.shuffle(translations)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state[user_id] = correct_translation
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {quiz_word}',
            reply_markup=get_answer_keyboard(translations)
        )
    finally:
        cursor.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
def get_answer_keyboard(translations):
    answer_buttons = [
        InlineKeyboardButton(text=translation, callback_data=f"answer_{translation}")
        for translation in translations
    ]
    stop_button = [InlineKeyboardButton(text="‚èπ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="stop_quiz")]
    markup = InlineKeyboardMarkup(inline_keyboard=[answer_buttons, stop_button])
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(lambda query: query.data.startswith("answer_") or query.data == "stop_quiz")
async def check_answer(query: types.CallbackQuery):
    user_id = query.from_user.id

    if query.data == "stop_quiz":
        await query.message.answer('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!')
        state.pop(user_id, None)
        return

    selected_translation = query.data.split("_")[1]
    correct_translation = state.get(user_id)
    if correct_translation is None:
        await query.message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.')
        return

    cursor = conn.cursor()
    try:
        if selected_translation.lower() == correct_translation.lower():
            cursor.execute('''
            INSERT INTO user_stats (user_id, correct_answers, wrong_answers)
            VALUES (%s, 1, 0)
            ON CONFLICT (user_id) DO UPDATE SET correct_answers = user_stats.correct_answers + 1
            ''', (user_id,))
            conn.commit()
            await query.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ')
        else:
            cursor.execute('''
            INSERT INTO user_stats (user_id, correct_answers, wrong_answers)
            VALUES (%s, 0, 1)
            ON CONFLICT (user_id) DO UPDATE SET wrong_answers = user_stats.wrong_answers + 1
            ''', (user_id,))
            conn.commit()
            await query.message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

        await ask_question(query.message, user_id)
    finally:
        cursor.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message(Command("add_word"))
async def add_word(message: types.Message):
    try:
        text = message.text.strip()
        if ':' not in text:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:\ncat:–∫–æ—Ç')
            return

        word, translation = text.split(':', 1)
        word = word.strip().lower()
        translation = translation.strip().lower()

        if not word or not translation:
            raise ValueError("–°–ª–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –ø—É—Å—Ç—ã–µ.")

        user_id = message.from_user.id

        cursor = conn.cursor()
        try:
            cursor.execute('''
            INSERT INTO user_words (user_id, word, translation)
            VALUES (%s, %s, %s)
            ''', (user_id, word, translation))
            conn.commit()
            await message.answer(f'–°–ª–æ–≤–æ "{word}" —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º "{translation}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
        finally:
            cursor.close()
    except ValueError as ve:
        await message.answer(f'–û—à–∏–±–∫–∞: {ve}')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("list_words"))
async def list_user_words(message: types.Message):
    user_id = message.from_user.id
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT word, translation FROM user_words WHERE user_id = %s', (user_id,))
        words = cursor.fetchall()
        if not words:
            await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.')
            return
        word_list = "\n".join([f"{word} - {translation}" for word, translation in words])
        await message.answer(f'–í–∞—à–∏ —Å–ª–æ–≤–∞:\n{word_list}')
    finally:
        cursor.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(Command("stats"))
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT correct_answers, wrong_answers FROM user_stats WHERE user_id = %s', (user_id,))
        stats = cursor.fetchone()
        if not stats:
            await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.')
            return
        correct, wrong = stats
        await message.answer(f'–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong}')
    finally:
        cursor.close()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    initialize_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())